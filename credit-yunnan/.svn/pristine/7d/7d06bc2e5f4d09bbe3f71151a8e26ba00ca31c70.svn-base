package com.ccb.portal.controller;

import java.util.*;

import com.alibaba.fastjson.support.config.FastJsonConfig;
import com.ccb.portal.entity.CreditRecommendType;
import com.ccb.portal.entity.ResponseCredit;
import com.ccb.portal.service.CreditRecommendTypeService;
import com.ccb.portal.vo.Const;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.pagehelper.util.StringUtil;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.annotations.Param;
//import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.ccb.portal.entity.CreditDmsn;
import com.ccb.portal.entity.YunnanCredit;
import com.ccb.portal.service.CreditDmsnService;
import com.ccb.portal.service.YunnanCreditService;
import com.ccb.portal.util.ResultUtil;
import com.ccb.portal.vo.Result;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Api(tags = { "信用分值" }, value = "信用")
@RestController
@RequestMapping("/credit")
public class CreditDmsnController {
	@Autowired
	private CreditDmsnService creditDmsnService;
	@Autowired
	private CreditRecommendTypeService creditRecommendTypeService;
	@Autowired
	private YunnanCreditService YunnanCreditService;
	@ApiOperation(value="获取信用得分",notes="获取信用得分")
	@RequestMapping(value="/getCreditScore",produces="application/json")
	public Result  getCreditScore( String Cst_id,String Cst_type,String Cst_identity_type,String Cst_identity_id) {

		if(StringUtils.isBlank(Cst_id)){
			return ResultUtil.error(Const.ERROR,"参数Cst_id为空");
		}else if(StringUtils.isBlank(Cst_type)){
			return ResultUtil.error(Const.ERROR,"参数Cst_type为空");
		}else if(StringUtils.isBlank(Cst_identity_type)){
			return ResultUtil.error(Const.ERROR,"参数Cst_identity_type为空");
		}else if(StringUtils.isBlank(Cst_identity_id)){
			return ResultUtil.error(Const.ERROR,"参数Cst_identity_id为空");
		}else if(!Arrays.asList(Const.CSTTYPE).contains(Cst_type)){
		    return ResultUtil.error(Const.ERROR,"参数Cst_type为自然人/企业");
        }
		Map map=new HashMap();
		map.put("Cst_id",Cst_id);
		map.put("Cst_type",Cst_type);
		map.put("Cst_identity_type",Cst_identity_type);
		map.put("Cst_identity_id",Cst_identity_id);
		try {
			ResponseCredit yunnanCredit=YunnanCreditService.getYunNanCreditByCstId(map);
			if(null!=yunnanCredit){
                map.put("CreditValue",yunnanCredit.getCredit_value());
                List<CreditRecommendType>typelist=creditRecommendTypeService.getCreditLeveByScore(map);
                JSONObject jsonObject1=JSONObject.fromObject(yunnanCredit);
                jsonObject1.put("credit_recommend_type",new ObjectMapper().writeValueAsString(typelist));
                return ResultUtil.success(jsonObject1);
            }else{
			    return ResultUtil.success(yunnanCredit);
            }

		} catch (Exception e) {
			e.printStackTrace();
			return ResultUtil.error(Const.ERROR,"查询异常");
		}
	}

	@RequestMapping(value="/getCreditScoreDetial",produces="application/json")
	public Result  getCreditScoreDetial( @RequestBody Map<String,String>map1) {
		Map<String,String>map=new HashMap<String,String>();
		String Cst_id=map1.get("Cst_id");
		System.out.println("Cst_id "+Cst_id);
		if(StringUtils.isBlank(Cst_id)){
			return ResultUtil.error(Const.ERROR,"参数Cst_id为空");
		}
		map.put("Cst_id",Cst_id);
		try {
			ResponseCredit yunnanCredit=YunnanCreditService.getYunNanCreditByCstId(map);

			map.put("CreditValue","");
			List<CreditRecommendType>typelist=creditRecommendTypeService.getCreditLeveByScore(map);
//			JsonConfig jsonObject=new JsonConfig();
//			jsonObject.addIgnoreFieldAnnotation(JsonIgnore.class);
			String objectMapper=new ObjectMapper().writeValueAsString(yunnanCredit);
			JSONObject jsonObject1=JSONObject.fromObject(objectMapper);
			jsonObject1.remove("dmsn_grplist");
			jsonObject1.put("credit_recommend_type",new ObjectMapper().writeValueAsString(typelist));
			return ResultUtil.success(jsonObject1);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ResultUtil.error(Const.ERROR,"查询异常");
		}


	}
	
}
